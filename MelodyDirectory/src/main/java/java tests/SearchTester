import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

import org.junit.jupiter.api.Test;

class SearchTester {

	@Test
	void testSearchAll() {
		Song SF = new Song("Sunflower", "From SpiderMan, Into The Spiderverse", "Pop", "10/18/18", "N/A","SpiderMan Soundtrack", "$2.00", "2:00");
		ArrayList<Song> songs = new ArrayList<Song>();
		songs.add(SF);
		Album spiderMan = new Album("SpiderMan Into the SpiderVerse", "Movie Soundtrack", "Pop", "10/18/18", "N/A", "Various Artists", songs, "Marvel Studios", "$2.00");
		ArrayList<Album> albums = new ArrayList<Album>();
		albums.add(spiderMan);
		Artist marvel = new Artist("Marvel", "Soundtrack for SpiderMan ITSV", "Pop", "10/18/18", "Marvel.com", albums);
		ArrayList<Object> test = new ArrayList<>();
		test.add(SF);
		test.add(spiderMan);
		test.add(marvel);
		// We could do substring search where if the substring exists, it's returned
		// Or we could do substring search where if the starting x letters are equivalent, it's returned
		// Need to implement a method that can search these objects by their name, all the objects involved have names
		assertEquals(test.search("s"), "Sunflower, SpiderMan Into the SpiderVerse");
		
		// This would not work for any of the objects added (blank search should return nothing; base case/neutral case
		assertEquals(test.search("z"), "");
		assertEquals(test.search(""), "");
		
		// This test would need to work if we implement substring search based on existence
		assertEquals(test.search("m"), "SpiderMan Into the SpiderVerse, marvel");
	}
	
	@Test
	void testSearchSongs() {
		Song SF = new Song("Sunflower", "From SpiderMan, Into The Spiderverse", "Pop", "10/18/18", "N/A","SpiderMan Soundtrack", "$2.00", "2:00");
		Song SB = new Song("Starboy", "The Weeknd's Top Five", "Pop", "11/25/16", "N/A","Starboy", "$2.00", "2:00");
		Song RA = new Song("Ramona", "From Kill Bill's debut album, Ramona", "Rap", "9/13/14", "N/A","Ramona", "$2.00", "2:00");
		Song SYA = new Song("See You Again", "From Tyler the Creator's Flower Boy Album", "Rap", "7/21/17", "N/A","Flower Boy", "$2.00", "2:00");
		ArrayList<Song> test = new ArrayList<>();
		test.add(SF);
		test.add(SB);
		test.add(RA);
		test.add(SYA);
		
		// Begins with, so it should return
		assertEquals(test.search("S"), "Sunflower, Starboy, See You Again");
		
		// Contains an R, probably will be done with SQL WHERE LIKE
		assertEquals(test.search("R"), "Sunflower, Starboy, Ramona");
		
		// Should return nothing
		assertEquals(test.search(""), "");
	}
	
	@Test
	void testSearchArtists() {
		Song SF = new Song("Sunflower", "From SpiderMan, Into The Spiderverse", "Pop", "10/18/18", "N/A","SpiderMan Soundtrack", "$2.00", "2:00");
		Song SB = new Song("Starboy", "The Weeknd's Top Five", "Pop", "11/25/16", "N/A","Starboy", "$2.00", "2:00");
		Song RA = new Song("Ramona", "From Kill Bill's debut album, Ramona", "Rap", "9/13/14", "N/A","Ramona", "$2.00", "2:00");
		ArrayList<Song> songs = new ArrayList<Song>();
		ArrayList<Song> songs2 = new ArrayList<Song>();
		ArrayList<Song> songs3= new ArrayList<Song>();
		ArrayList<Song> songs4 = new ArrayList<Song>();
		songs.add(SF);
		songs2.add(SB);
		Album SM = new Album("SpiderMan Into the SpiderVerse", "Movie Soundtrack", "Pop", "10/18/18", "N/A", "Various Artists", songs, "Marvel Studios", "$5.00");
		Album SBY = new Album("Starboy", "Weeknd's Biggest Album", "Pop", "10/18/18", "N/A", "The Weeknd", songs2, "XO Republic Records", "$5.00");
		Album RMA = new Album("Ramona", "Kill Bill's Debut Album", "Rap", "9/13/14", "N/A", "Kill Bill", songs3, "Exociety", "$5.00");
		ArrayList<Album> SpidermanITSV = new ArrayList<Album>();
		ArrayList<Album> Starboy = new ArrayList<Album>();
		ArrayList<Album> Ramona = new ArrayList<Album>();
		SpidermanITSV.add(SM);
		Starboy.add(SBY);
		Ramona.add(RMA);
		Artist marvel = new Artist("Marvel", "Marvel Studios Music", "Pop", "N/A", "Marvel.com", SpidermanITSV);
		Artist TheWeeknd = new Artist("The Weeknd", "Popular Pop/R&B Singer", "Pop","N/A", "TheWeeknd.com", Starboy); 
		Artist KillBill = new Artist("Kill Bill", "Upcoming Exociety Rapper", "Rap", "N/A", "Exociety.com", Ramona);
		ArrayList<Artist> test = new ArrayList<>();
		test.add(marvel);
		test.add(TheWeeknd);
		test.add(KillBill);
		
		// Should just return those containing m
		assertEquals(test.search("m"), "marvel");
		
		// Should just return those containing t & k
		assertEquals(test.search("t"), "TheWeeknd");
		assertEquals(test.search("k"), "TheWeeknd, KillBill");
		
		// Should return nothing, as none contain z, and blank should return nothing
		test.search(test.search("z"), "");
		assertEquals(test.search(""), "");
	}
	
	@Test
	void testSearchAlbums() {
		Song SF = new Song("Sunflower", "From SpiderMan, Into The Spiderverse", "Pop", "10/18/18", "N/A","SpiderMan Soundtrack", "$2.00", "2:00");
		Song SB = new Song("Starboy", "The Weeknd's Top Five", "Pop", "11/25/16", "N/A","Starboy", "$2.00", "2:00");
		Song RA = new Song("Ramona", "From Kill Bill's debut album, Ramona", "Rap", "9/13/14", "N/A","Ramona", "$2.00", "2:00");
		Song SYA = new Song("See You Again", "From Tyler the Creator's Flower Boy Album", "Rap", "7/21/17", "N/A","Flower Boy", "$2.00", "2:00");
		ArrayList<Song> songs = new ArrayList<Song>();
		ArrayList<Song> songs2 = new ArrayList<Song>();
		ArrayList<Song> songs3= new ArrayList<Song>();
		ArrayList<Song> songs4 = new ArrayList<Song>();
		songs.add(SF);
		songs2.add(SB);
		Album Spiderman = new Album("SpiderMan Into the SpiderVerse", "Movie Soundtrack", "Pop", "10/18/18", "N/A", "Various Artists", songs, "Marvel Studios", "$5.00");
		Album Starboy = new Album("Starboy", "Weeknd's Biggest Album", "Pop", "10/18/18", "N/A", "The Weeknd", songs2, "XO Republic Records", "$5.00");
		Album Ramona = new Album("Ramona", "Kill Bill's Debut Album", "Rap", "9/13/14", "N/A", "Kill Bill", songs3, "Exociety", "$5.00");
		ArrayList<Album> test = new ArrayList<>();
		test.add(Spiderman);
		test.add(Starboy);
		test.add(Ramona);
		// Should return all entries containing s
		assertEquals(test.search("s"), "Spiderman Into the Spiderverse, Starboy");
		
		// Should return all entries containing r
		assertEquals(test.search("r"), "Spiderman Into the Spiderverse, Starboy, Ramona");
		
		// Should return nothing
		assertEquals(test.search(""), "");
		assertEquals(test.search("l"), "");
	}
	

}
